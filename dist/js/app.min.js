window.onscroll=function(){myFunction()};let navbar=document.getElementById("navbar"),sticky=navbar.offsetTop;function myFunction(){window.pageYOffset>=sticky?navbar.classList.add("sticky"):navbar.classList.remove("sticky")}$(document).ready(function(){$(".sidenav").sidenav({menuWidth:250,edge:"left",closeOnClick:!0,draggable:!1})});
$(document).ready(function(){$(".scrollspy").scrollSpy({activeClass:"current"})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
